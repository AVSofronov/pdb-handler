from pdbremix import pdbatoms, util, asa, data, pdbtext, fetch
from datetime import datetime, date 
import matplotlib.pyplot as plt
import collections, os, glob, string

def counter(atom, border_values, distribution):
  
  elem = atom.element
  if atom.bfactor == 0:
    distribution[elem, '=0'] += 1
    distribution['t', '=0'] += 1
  for b in border_values:
    if atom.bfactor > b and atom.bfactor <= (b+1):
        distribution[elem, b] += 1
        distribution['t', b] += 1
    
#asa calculation                  
def calculate_asa(soup):            
  atoms = []
  for res in soup.residues():
    if res.type not in data.solvent_res_types:
      atoms.extend(res.atoms())
  pdbatoms.add_radii(atoms)
  areas = asa.calculate_asa_optimized(atoms, 1.4)
  for a, area in zip(atoms, areas):
    a.asa = area
    a.bfactor = area
  for a in soup.atoms():
    if not hasattr(a, 'asa'):
      a.bfactor = 0.0
  soup.write_pdb('asa_'+original_pdb)                  

                                   
#function to make distribution of number of atoms by ASA values
# for each element and in total
def elements_asa_distr(soup, mode):
  max_asa = 0
  for a in soup.atoms():
    c = a.bfactor
    if c > max_asa:
      max_asa = c
    
  
  border_values = [x for x in range(100)]
  #border_values = [x for x in range(int(max_asa)+1)]
  borders = [x for x in range (int(max_asa)+1) if x % period == 0]
         
  H=0
  C=0
  O=0
  N=0
  S=0
  P=0
  for a in soup.atoms():
    if a.element == 'H':
      H += 1
    elif a.element == 'C':
      C += 1
    elif a.element == 'O':
      O += 1
    elif a.element == 'N':
      N += 1
    elif a.element == 'S':
      S += 1
    elif a.element == 'P':
      P += 1
    
  util.goto_dir(protein_name+' '+method+' '+original_pdb)

  #creating of dictionary  
  considered_types = ['O', 'N', 'C', 't']
  
  distribution = collections.OrderedDict()
  reldistribution = collections.OrderedDict()
  
  for t in considered_types:
    distribution[t,'=0'] = 0.0 
    for b in border_values:
      distribution[t,b] = 0.0
  
  #calculating the distribution    var H_N  
  if mode == 'H_N':
    for a in soup.atoms():
      valid_atom_types = [
#              "O",                  
              "CG2",
              "ND2",
              "NH1",
              "NH2",
              "NZ",
              "OD1",
              "OE1",
              "OE2",
              "OG",
              "OG1",
              "OH",
              "SG",
              "OXT"
              ]
      """near_valid_atom_types = [
              "CG1",
              "CB",
              "CD1",
              "CD2",
              "CE",
              "NE2",
              ]"""     
      res = a.res_type
      atom_type = a.type
      if a.element not in ['S','P']:
        if atom_type in valid_atom_types:      
          counter(a, border_values, distribution)
        elif atom_type == 'CB':
          if res == 'ALA':
            counter(a,border_values,  distribution)
        elif atom_type == 'CD1':
          if res in ['LEU','ILE']:
            counter(a,border_values,  distribution)
        elif atom_type == 'CD2':
          if res == 'LEU':
            counter(a,border_values,  distribution)
        elif atom_type == 'CE':
          if res == 'MET':
            counter(a,border_values,  distribution)
        elif atom_type == 'NE2':
          if res == 'GLN':
            counter(a,border_values,  distribution)
        elif atom_type == 'CG1':
          if res == 'VAL':
            counter(a,border_values,  distribution)
            
  elif mode == 'ALL':
    for a in soup.atoms():      
      if a.element != 'S':
        counter(a,border_values,  distribution)
  else:
    print ('pick valid mode')
                      
  #relative distribution
  for t in considered_types:    
    for b in border_values:
      try:
        reldistribution[t,b] = round(float(distribution[t,b])/float(distribution['t',b] ),2)
        reldistribution[t,'=0'] = round(float(distribution[t,'=0'])/float(distribution['t','=0']),2)
      except ZeroDivisionError:
        reldistribution[t,b] = 0.0
        reldistribution[t,'=0'] = 0.0
  numbers = distribution.values()
  
  finaldistr = ['elem ASA # %\n']
  for k, v in zip(distribution.items(), reldistribution.items()):
    finaldistr.append(k[0][0]+' '+str(k[0][1])+' '+str(k[1])+' '+str(v[1])+'\n')
  result = ''.join(finaldistr)
  #for line in result1.splitlines():
    #print line
  with open('result.txt','w') as f:
    f.write(result) 
  return numbers       

  xticks = ['=0']
  for b in borders:
    xticks.append(str(b)+'-'+str(b+period))

  #barchart for elements
  if mode2 == 'single': #временное решение
    for t in considered_types[:3]:
      tr = collections.OrderedDict()
      distr = collections.OrderedDict()
      val_ticks = []    
      tr['=0'] = reldistribution[t, '=0']
      distr['=0'] = distribution[t, '=0']
      for b in borders[1:]:
        tr[b] = round(sum(reldistribution[t,b - x] for x in range(period + 1))/period, 2)
        distr[b] = sum(distribution[t,b - x] for x in range(period + 1))/period
      for x, d in zip(xticks, distr.values()):
        val_ticks.append(x+'\n'+str(d)) 
      x = range(len(tr.keys()))
      y = tr.values()    
      plt.bar(x,y, align = 'center')    
      plt.xticks(range(len(tr)), val_ticks)
      plt.suptitle(protein_name+' '+method+' '+original_pdb)
      plt.title('distribution of '+t+' atoms by ASA')
      for j,i in zip(x,y):
        plt.annotate(i, xy=(j,i), xytext=(-10,2), textcoords='offset points')
      plt.xlabel('ASA')
      plt.ylabel('%')
      plt.savefig(t+'.jpeg')
      #plt.show()    
      plt.close()
      
    #barchart total 
    total = collections.OrderedDict()
    total['=0'] = distribution['t', '=0']
    for b in borders:
      total[b] = distribution['t',b]
    #print ('Distribution of total atoms by ASA in ' +original_pdb)
    #print tr
    x = range(len(total.keys()))
    y = total.values() 
    plt.bar(x,y,align = 'center')
    plt.xticks(range(len(total)), xticks)
    plt.suptitle(protein_name+' '+method+' '+original_pdb)
    plt.title('distribution of total atoms by ASA')
    for j,i in zip(x,y):
      plt.annotate(i, xy=(j,i), xytext=(-8,1), textcoords='offset points')
    plt.xlabel('ASA')
    plt.ylabel('#atoms')
    plt.savefig('total.jpeg')
    #plt.show()
    plt.close()
    
  
#>>>>>>>>>>>> enter parameters here <<<<<<<<<<<<<<  
mode1 = 'H_N'    # 'H_N' or 'ALL'
mode2 = 'multi' # 'multi' or 'single'
period = 10
#<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>

start = datetime.now()
util.goto_dir('results')
#fetch.get_pdbs_with_http('1be9') #To download pdb directly from web

if mode2 == 'single':
  # >>>>>>>>>>>> choose pdb here <<<<<<<<<<<<<<
  protein_name = 'test'
  method = 'test'
  original_pdb = '3bt6.pdb'  
  #<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>
    
  #    DISABLE/ENABLE BELOW FUNCTIONS IF YOU NEED
  #-------------------------------------------------
  #pdbtext.clean_pdb(original_pdb, 'clean_'+original_pdb) 
  
  #our_soup = pdbatoms.Soup('clean_'+original_pdb)
  #calculate_asa(our_soup) 
  parent_dir = os.getcwd()
  asa_soup = pdbatoms.Soup('asa_'+original_pdb) 
  util.goto_dir(str(date.today()))
  elements_asa_distr(asa_soup, mode1)
  os.chdir(parent_dir)
  finish = datetime.now()
  print finish - start  
   
if mode2 == 'multi':
  parent_dir = os.getcwd()
#  for file in glob.glob('*.pdb'):
#    if 'clean_' not in file:
#      clean_pdb = ('clean_'+file)
#      pdbtext.clean_pdb(file, clean_pdb)
  
  distr = ['elem ASA '] 
  ordereddict = collections.OrderedDict()
  for t in ['O', 'N', 'C', 't']:
    ordereddict[t, '=0'] = ''
    for b in [x for x in range(100)]:
      ordereddict[t, b] = ''
  
  for k in ordereddict.keys():
    distr.append('\n'+k[0]+' '+str(k[1]))  
  
  for file in glob.glob('clean_*'):
    protein_name = ''
    method = ''
    original_pdb = string.replace(file, 'clean_', '')
    #our_soup = pdbatoms.Soup(file)    
    #calculate_asa(our_soup)     
    asa_soup = pdbatoms.Soup('asa_'+original_pdb)    
    util.goto_dir(str(date.today()))
    numbers = [str(original_pdb)+' ']    
    num_results = elements_asa_distr(asa_soup, mode1)
    for i in num_results:
      numbers.append(' '+str(i))
    for l in distr:
      a = distr.index(l)
      distr[a] += str(numbers[a])
    print (original_pdb+' done')
    os.chdir(parent_dir)
    finish = datetime.now()
    print finish - start  
  
  summary = ''.join(distr)   
  with open('summarized.txt','w') as f:
    f.write(summary)
print 'job done!'  
